import { LinkLoader, Blockstore, KnownReifiers, NodeReifier } from "./traversal";
import type { Block } from "multiformats/block";
import type { CID } from "multiformats";
interface Resolvable {
    resolve: (res: Block<any>) => void;
    reject: (res: Error) => void;
}
export declare type BlockNotifyFn = (block: Block<any>) => void;
export declare type WaitNotifyFn = (cid: CID) => void;
export declare class AsyncLoader implements LinkLoader {
    store: Blockstore;
    tracker?: BlockNotifyFn;
    waitNotify?: WaitNotifyFn;
    pending: Map<string, Block<any>>;
    loaded: Set<string>;
    pullQueue: Map<string, Resolvable[]>;
    reifiers: KnownReifiers;
    notifyWaiting: boolean;
    constructor(store: Blockstore, tracker?: BlockNotifyFn, waitNotify?: WaitNotifyFn);
    load(cid: CID): Promise<Block<any>>;
    waitForBlock(cid: CID): Promise<Block<any>>;
    push(block: Block<any>): void;
    flush(blk: Block<any>): void;
    reifier(name: string): NodeReifier;
    close(): void;
    setWaitNotify(cb: WaitNotifyFn): void;
}
export {};
//# sourceMappingURL=async-loader.d.ts.map