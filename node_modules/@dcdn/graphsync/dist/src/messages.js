import { CID } from "multiformats";
import { Block } from "multiformats/block";
import { Buffer } from "buffer";
import { parse as uuidParse } from "uuid";
import * as dagCBOR from "@ipld/dag-cbor";
import * as varint from "varint";
import lp from "it-length-prefixed";
import { decoderFor } from "./traversal";
export const PROTOCOL = "/ipfs/graphsync/2.0.0";
export const DT_PROTOCOL = "/fil/datatransfer/1.1.0";
export var ResponseStatusCode;
(function (ResponseStatusCode) {
    ResponseStatusCode[ResponseStatusCode["RequestAcknowledged"] = 10] = "RequestAcknowledged";
    ResponseStatusCode[ResponseStatusCode["PartialResponse"] = 14] = "PartialResponse";
    ResponseStatusCode[ResponseStatusCode["RequestPaused"] = 15] = "RequestPaused";
    ResponseStatusCode[ResponseStatusCode["RequestCompletedFull"] = 20] = "RequestCompletedFull";
    ResponseStatusCode[ResponseStatusCode["RequestCompletedPartial"] = 21] = "RequestCompletedPartial";
    ResponseStatusCode[ResponseStatusCode["RequestRejected"] = 30] = "RequestRejected";
    ResponseStatusCode[ResponseStatusCode["RequestFailedBusy"] = 31] = "RequestFailedBusy";
    ResponseStatusCode[ResponseStatusCode["RequestFailedUnknown"] = 32] = "RequestFailedUnknown";
    ResponseStatusCode[ResponseStatusCode["RequestFailedLegal"] = 33] = "RequestFailedLegal";
    ResponseStatusCode[ResponseStatusCode["RequestFailedContentNotFound"] = 34] = "RequestFailedContentNotFound";
    ResponseStatusCode[ResponseStatusCode["RequestCancelled"] = 35] = "RequestCancelled";
})(ResponseStatusCode || (ResponseStatusCode = {}));
export const statuses = {
    [ResponseStatusCode.RequestAcknowledged]: "RequestAcknowledged",
    [ResponseStatusCode.PartialResponse]: "PartialResponse",
    [ResponseStatusCode.RequestPaused]: "RequestPaused",
    [ResponseStatusCode.RequestCompletedFull]: "RequestCompletedFull",
    [ResponseStatusCode.RequestCompletedPartial]: "RequestCompletedPartial",
    [ResponseStatusCode.RequestRejected]: "RequestRejected",
    [ResponseStatusCode.RequestFailedBusy]: "RequestFailedBusy",
    [ResponseStatusCode.RequestFailedUnknown]: "RequestFailedUnknown",
    [ResponseStatusCode.RequestFailedLegal]: "RequestFailedLegal",
    [ResponseStatusCode.RequestFailedContentNotFound]: "RequestFailedContentNotFound",
    [ResponseStatusCode.RequestCancelled]: "RequestCancelled",
};
export var GraphSyncLinkAction;
(function (GraphSyncLinkAction) {
    GraphSyncLinkAction["Present"] = "p";
    GraphSyncLinkAction["DuplicateNotSent"] = "d";
    GraphSyncLinkAction["Missing"] = "m";
    GraphSyncLinkAction["DuplicateDAGSkipped"] = "s";
})(GraphSyncLinkAction || (GraphSyncLinkAction = {}));
var GraphSyncRequestType;
(function (GraphSyncRequestType) {
    GraphSyncRequestType["New"] = "n";
    GraphSyncRequestType["Cancel"] = "c";
    GraphSyncRequestType["Update"] = "u";
})(GraphSyncRequestType || (GraphSyncRequestType = {}));
export function newRequest(id, root, sel, ext) {
    const req = {
        id: uuidParse(id),
        type: GraphSyncRequestType.New,
        pri: 0,
        root,
        sel,
    };
    if (ext) {
        req.ext = ext;
    }
    return lp.encode.single(Buffer.from(dagCBOR.encode({
        gs2: {
            req: [req],
        },
    })));
}
export function decodeMessage(bytes) {
    return dagCBOR.decode(bytes).gs2;
}
export async function decodeBlock(block, hashers) {
    let offset = 0;
    const cidVersion = varint.decode(block[0], offset);
    offset += varint.decode.bytes;
    const multicodec = varint.decode(block[0], offset);
    offset += varint.decode.bytes;
    const multihash = varint.decode(block[0], offset);
    const hasher = hashers[multihash];
    if (!hasher) {
        throw new Error("Unsuported hasher");
    }
    const hash = await hasher.digest(block[1]);
    const cid = CID.create(cidVersion, multicodec, hash);
    const decode = decoderFor(cid);
    const value = decode ? decode(block[1]) : block[1];
    return new Block({ value, cid, bytes: block[1] });
}
//# sourceMappingURL=messages.js.map