/// <reference types="node" />
import type { Network, ProtocolDialer } from "./network";
import type { HandlerProps } from "libp2p";
import type { CID, hasher } from "multiformats";
import type { Block } from "multiformats/block";
import type PeerId from "peer-id";
import { EventEmitter } from "events";
import { AsyncLoader } from "./async-loader";
import { GraphSyncBlock, GraphSyncRequest, GraphSyncResponse } from "./messages";
import type { SelectorNode, Blockstore, KnownReifiers, NodeReifier } from "./traversal";
export declare class GraphSync extends EventEmitter {
    started: boolean;
    network: Network;
    blocks: Blockstore;
    hashers: {
        [key: number]: hasher.MultihashHasher<any>;
    };
    requests: Map<string, Request>;
    constructor(net: Network, blocks: Blockstore);
    start(): void;
    stop(): void;
    request(link: CID, sel: SelectorNode): Request;
    _loadBlocksForRequests(gblocks: GraphSyncBlock[], reqids: string[]): void;
    _handleResponse(resp: GraphSyncResponse): void;
    _handleRequest(peer: PeerId, req: GraphSyncRequest): Promise<void>;
    _handler(props: HandlerProps): Promise<void>;
}
export declare class Request extends EventEmitter {
    id: string;
    root: CID;
    selector: SelectorNode;
    dialer: ProtocolDialer;
    loader: AsyncLoader;
    reifiers: KnownReifiers;
    constructor(id: string, root: CID, sel: SelectorNode, dialer: ProtocolDialer, blocks: Blockstore);
    open(peer: PeerId, extensions?: {
        [key: string]: any;
    }): Promise<void>;
    drain(): Promise<void>;
    reifier(name: string): NodeReifier;
    close(): void;
    load(link: CID): Promise<Block<any>>;
    incomingBlockHook(block: Block<any>): void;
    incomingResponseHook(resp: GraphSyncResponse): void;
}
//# sourceMappingURL=graphsync.d.ts.map