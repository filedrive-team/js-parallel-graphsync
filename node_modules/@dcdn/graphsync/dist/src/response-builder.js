import { ResponseStatusCode, GraphSyncLinkAction, } from "./messages";
import * as dagCBOR from "@ipld/dag-cbor";
import * as varint from "varint";
import { walkBlocks, LinkSystem, unixfsReifier, Node, parseContext, } from "./traversal";
const MAX_SIZE = 256 * 1024;
function varintEncoder(buf) {
    let out = new Uint8Array(buf.reduce((acc, curr) => {
        return acc + varint.encodingLength(curr);
    }, 0));
    let offset = 0;
    for (const num of buf) {
        out = varint.encode(num, out, offset);
        offset += varint.encodingLength(num);
    }
    return out;
}
function toPrefix(cid) {
    const version = cid.version;
    const codec = cid.code;
    const multihash = cid.multihash.code;
    const digestLength = cid.multihash.digest.length;
    return varintEncoder([version, codec, multihash, digestLength]);
}
export async function* responseBuilder(req, store) {
    const ls = new LinkSystem(store, { unixfs: unixfsReifier });
    let blk = [];
    let meta = [];
    let size = 0;
    for await (const block of walkBlocks(new Node(req.root), parseContext().parseSelector(req.sel), ls)) {
        blk.push([toPrefix(block.cid), block.bytes]);
        meta.push([block.cid, GraphSyncLinkAction.Present]);
        size += block.bytes.length;
        if (size >= MAX_SIZE) {
            yield dagCBOR.encode({
                gs2: {
                    rsp: [
                        {
                            reqid: req.id,
                            stat: ResponseStatusCode.PartialResponse,
                            meta,
                        },
                    ],
                    blk,
                },
            });
            blk = [];
            meta = [];
            size = 0;
        }
    }
    yield dagCBOR.encode({
        gs2: {
            rsp: [
                {
                    reqid: req.id,
                    stat: ResponseStatusCode.RequestCompletedFull,
                    meta,
                },
            ],
            blk,
        },
    });
}
//# sourceMappingURL=response-builder.js.map