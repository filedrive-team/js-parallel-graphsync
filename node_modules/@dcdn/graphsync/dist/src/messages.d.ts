import { CID, hasher } from "multiformats";
import { Block } from "multiformats/block";
import type BufferList from "bl/BufferList";
import { SelectorNode } from "./traversal";
export declare const PROTOCOL = "/ipfs/graphsync/2.0.0";
export declare const DT_PROTOCOL = "/fil/datatransfer/1.1.0";
export declare type ChannelID = [string, string, number];
export declare type TransferMessage = {
    IsRq: boolean;
    Request: TransferRequest | null;
    Response: TransferResponse | null;
};
export declare type TransferRequest = {
    Type: number;
    XferID: number;
    BCid: CID | null;
    Paus: boolean;
    Part: boolean;
    Pull: boolean;
    Stor: SelectorNode | null;
    Vouch: any | null;
    VTyp: string;
    RestartChannel: ChannelID;
};
export declare type TransferResponse = {
    Type: number;
    Acpt: boolean;
    Paus: boolean;
    XferID: number;
    VRes: any | null;
    VTyp: string;
};
export declare enum ResponseStatusCode {
    RequestAcknowledged = 10,
    PartialResponse = 14,
    RequestPaused = 15,
    RequestCompletedFull = 20,
    RequestCompletedPartial = 21,
    RequestRejected = 30,
    RequestFailedBusy = 31,
    RequestFailedUnknown = 32,
    RequestFailedLegal = 33,
    RequestFailedContentNotFound = 34,
    RequestCancelled = 35
}
export declare const statuses: {
    10: string;
    14: string;
    15: string;
    20: string;
    21: string;
    30: string;
    31: string;
    32: string;
    33: string;
    34: string;
    35: string;
};
export declare enum GraphSyncLinkAction {
    Present = "p",
    DuplicateNotSent = "d",
    Missing = "m",
    DuplicateDAGSkipped = "s"
}
export declare type GraphSyncBlock = [Uint8Array, Uint8Array];
declare type GraphSyncPriority = number;
declare type GraphSyncMetadatum = [CID, GraphSyncLinkAction];
export declare type GraphSyncMetadata = GraphSyncMetadatum[];
declare enum GraphSyncRequestType {
    New = "n",
    Cancel = "c",
    Update = "u"
}
export declare type GraphSyncExtensions = {
    [key: string]: any;
};
export declare type GraphSyncRequest = {
    id: Uint8Array;
    type: GraphSyncRequestType;
    pri: GraphSyncPriority;
    root: CID;
    sel: SelectorNode;
    ext?: GraphSyncExtensions;
};
export declare type GraphSyncResponse = {
    reqid: Uint8Array;
    stat: ResponseStatusCode;
    meta?: GraphSyncMetadata;
    ext?: GraphSyncExtensions;
};
export declare type GraphSyncMessage = {
    req?: GraphSyncRequest[];
    rsp?: GraphSyncResponse[];
    blk?: GraphSyncBlock[];
};
export declare type GraphSyncMessageRoot = {
    gs2: GraphSyncMessage;
};
export declare function newRequest(id: string, root: CID, sel: SelectorNode, ext?: GraphSyncExtensions): BufferList;
export declare function decodeMessage(bytes: Uint8Array): GraphSyncMessage;
export declare function decodeBlock(block: GraphSyncBlock, hashers: {
    [key: number]: hasher.MultihashHasher<any>;
}): Promise<Block<any>>;
export {};
//# sourceMappingURL=messages.d.ts.map